#!/bin/bash

USAGE="
Usage: do-wp-restore-local HOST FQDN DB [CODEBASE]
For DigitalOcean only.
Restores a WordPress site from local files.

HOST must be configured in ~/.ssh/config
FQDN the fully qualified domain name for the site
DB is the path to a .sql.gz file

# Optional arguments and their defaults
CODEBASE is the path to the codebase
"
# Print USAGE if no args
if [ $# -eq 0 ]; then
    echo "$USAGE"
    exit 1
fi

function main {
    local HOSTNAME CODEBASE DB SCRIPTDIR
    local SITEURL PREFIX WPCONFIG
    HOSTNAME="$1"
    FQDN="$2"
    DB="$3"
    [ ! -z "$4" ] && CODEBASE="$4"
    SCRIPTDIR=$(dirname "${0}")
    WPARGS="--path=/var/www/html --ssh=${HOSTNAME} --allow-root"
# Check for required values and binaries
    [ ! -f "$DB" ] && { echo "${DB} is not a file"; exit 1; }

    echo "Test connection"
    while true; do
        ssh -o ConnectTimeout=3 -q "$HOSTNAME" \
            "[ -f /var/lib/cloud/instance/boot-finished ]"
        if [ $? -eq 0 ]; then
            sleep 1
            echo "Connected"
            break
        else
            echo "No connection, trying again"
            sleep 1
        fi
    done

# Make big tmp dir if not exist

    if [ -d "$CODEBASE" ]; then 
# Find the wordpress webroot and copy to server
        WPCONFIG="${CODEBASE}/wp-config.php"
        [ ! -f "$WPCONFIG" ] && { echo "wp-config.php not found"; exit 1; }
        ssh "$HOSTNAME" "[ ! -d /var/www/new ] && mkdir /var/www/new"
        rsync \
            -az \
            --protect-args \
            --delete \
            --exclude=".git*" \
            --exclude="wp-content/updraft" \
            --progress \
            "${CODEBASE}/" \
            "${HOSTNAME}:/var/www/new/"
# Replace the webroot with the new files
        ssh "$HOSTNAME" 'rm -rf /var/www/html-vanilla'
        ssh "$HOSTNAME" "mv -f /var/www/html /var/www/html-vanilla" || exit 1
        ssh "$HOSTNAME" "mv -f /var/www/new /var/www/html" || { echo "new dir not found"; exit 1; }
        ssh "$HOSTNAME" "cp /var/www/html/wp-config.php /var/www/wp-config.php.old" || exit 1
        ssh "$HOSTNAME" "cp /var/www/wp-config.php.fresh /var/www/html/wp-config.php" || exit 1
        echo "${CODEBASE} restored"
# Extract the db table prefix from old config
# Find the old line, remove the trailing newline, escape single quotes
        PREFIX=$(grep "table_prefix" "$WPCONFIG")
        echo "a"
        PREFIX=$(echo -n "$PREFIX" | sed "s/'/\\'/g")
        echo "$PREFIX"
        ssh "$HOSTNAME" "sed -i '/table_prefix/c "${PREFIX}"' /var/www/html/wp-config.php" || exit 1
        echo "Table prefix replaced in wp-config.php"
        ssh "$HOSTNAME" "rm /etc/nginx/sites-enabled/default; service nginx restart" || exit 1
        echo "Nginx restarted"
    else
        echo "CODEBASE not supplied, restoring database only."
    fi
# Find, extract and import the db
# Replace the siteurl
    gunzip -k "$DB" || { echo "gunzip failed"; exit 1; }
    echo "Database dump extracted"
    DB="${DB%.*}"
    scp "$DB" "${HOSTNAME}:/var/www/restore.sql" || { echo "scp error"; exit 1; }
    trap "rm ${DB}" EXIT
    wp $WPARGS db import /var/www/restore.sql
    [ ! $? -eq 0 ] && { echo "Db import error"; exit 1; }
    SITEURL=$(wp $WPARGS option get siteurl)
    [ ! $? -eq 0 ] && { echo "Siteurl error"; exit 1; }
    wp $WPARGS search-replace "$SITEURL" "https://${FQDN}" --skip-columns=guid
    [ ! $? -eq 0 ] && { echo "Search replace error"; exit 1; }
    wp $WPARGS cache flush
    [ ! $? -eq 0 ] && { echo "Cache flush error wtf"; exit 1; }
    wordpress-permissions "$HOSTNAME" dev || echo "Permissions error"
    notify "Site has been restored to https://${FQDN}."
}

main "$@"
exit 0
