#!/bin/bash

USAGE="
Usage: do-restore-wp HOST RESTICDB RESTICCODEBASE CONFIGFILE WEBROOT
For digitalocean only.
Restores a WordPress site from restic.

HOST must be configured in ~/.ssh/config
CONFIGFILE defaults to ~/.wp-admin
RESTICCODEBASE hash of target snapshot to restore
RESTICDB hash of target db to restore
WEBROOT is not yet implemented
"
# Print USAGE if no args
if [ $# -eq 0 ]; then
    echo "$USAGE"
    exit 1
fi

function main {
    local NAME RESTICCODEBASE RESTICDB CONFIGFILE SCRIPTDIR
    local RESTIC BIGTMP WPDIR SQLGZ
    NAME="$1"
    RESTICDB="$2"
    [ -z "$2" ] && RESTICCODEBASE="$2"
    CONFIGFILE="${4:-${HOME}/.wp-admin}"
    echo "$CONFIGFILE"
    SCRIPTDIR=$(dirname "${0}")
    WPARGS="--path=/var/www/html --ssh=${NAME} --allow-root"
    RESTIC=$(which restic)
    BIGTMP="${BIGTMP:-${HOME}/.tmp.big}"
# TODO implement WEBROOT

# Cleanup on exit
    #trap "rm -rf ${BIGTMP}/*" EXIT
# Check for required values and binaries
    [ -f "$CONFIGFILE" ] && source $CONFIGFILE || { echo "Config not found"; exit 1; }
    [ ! -f "$RESTIC" ] && { echo "RESTIC binary not found"; exit 1; }
    [ -z "$RESTICDB" ] && { echo "RESTICDB key not set"; exit 1; }
    [ -z "$RESTIC_REPOSITORY" ] && { echo "RESTIC_REPOSITORY key not set"; exit 1; }
    [ -z "$RESTIC_PASSWORD" ] && { echo "RESTIC_PASSWORD key not set"; exit 1; }
    [ -z "$AWS_ACCESS_KEY_ID" ] && { echo "AWS_ACCESS_KEY_ID key not set"; exit 1; }
    [ -z "$AWS_SECRET_ACCESS_KEY" ] && { echo "AWS_SECRET_ACCESS_KEY key not set"; exit 1; }

    echo "Test connection"
    while true; do
        ssh -o ConnectTimeout=3 -q "$NAME" \
            "[ -f /var/lib/cloud/instance/boot-finished ]"
        if [ $? -eq 0 ]; then
            sleep 1
            echo "Connected"
            break
        else
            echo "No connection, trying again"
            sleep 1
        fi
    done

# Make big tmp dir if not exist
    [ ! -d "$BIGTMP" ] && mkdir "$BIGTMP"

    if [ ! -z "$RESTICCODEBASE" ]; then 
# Restore the targeted snapshots to the big temp dir
        $RESTIC restore \
            --exclude=".git*" \
            --exclude="mri-admin*" \
            ${RESTICCODEBASE} \
            -qt "$BIGTMP" \
            || exit 1
# Find the wordpress webroot and copy to server
        WPDIR=$(find ${BIGTMP}/ -name wp-content | xargs dirname)
        WPDIR=${WPDIR//$'\n'/}
        ssh "$NAME" "mkdir /var/www/new" 
        rsync \
            -av \
            --exclude=".git*" \
            --progress \
            "${WPDIR}"/* \
            "${NAME}:/var/www/new"
# Replace the webroot with the new files
        ssh "$NAME" "mv /var/www/html /var/www/html-vanilla" || exit 1
        ssh "$NAME" "mv /var/www/new /var/www/html" || exit 1
        ssh "$NAME" "cp /var/www/wp-config.php.fresh /var/www/html/wp-config.php" || exit 1
        wordpress-permissions "$NAME" www-data
    else
        echo "RESTICCODEBASE not supplied, restoring database only."
    fi
# Get the db backup
    $RESTIC restore \
        ${RESTICDB} \
        -qt \
        "$BIGTMP" \
        || exit 1
# Find, extract and import the db
    SQLGZ=$(find ${BIGTMP}/ -name "*.gz")
    SQLGZ=${SQLGZ//$'\n'/}
    gunzip "$SQLGZ"
    SQL=$(find ${BIGTMP}/ -name "*.sql")
    scp "$SQL" "${NAME}:/var/www/restore.sql"
    wp $WPARGS db import /var/www/restore.sql
# TODO search-replace, need that FQDN in here
#notify "Site has been restored to ${NAME}."
}

main "$@"
exit 0
