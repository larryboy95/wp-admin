#!/bin/bash
USAGE="
Usage: wordpress-backup HOSTNAME BACKUPTYPE [WEBROOT]
Where:
- HOSTNAME must be available in ssh config
- BACKUPTYPE can be one of:
    - full: backup webroot and db to s3, rotated
    - manual: full backup to BUPDIR/manual, not rotated
    - db: backup db to admin server
    - tmp: backup db and webroot to /tmp on admin server
- WEBROOT is optional, defaults to /var/www/html
"

# Print USAGE if no args
if [ $# -eq 0 ]; then
    echo "$USAGE"
    exit 1
fi
# Check if already running
if ! mkdir -p ~/tmp/wordpress-backup.lock; then
	printf "Failed to acquire lock. (Script already running?)\n" >&2
	exit 1
fi
# Remove the lockdir on exit
trap 'rm -rf ~/tmp/wordpress-backup.lock' EXIT	

HOSTNAME="$1"
# Set defaults if arguments absent
BACKUPTYPE="${2:-manual}"
WEBROOT="${3:-/var/www/html}"
DBFNAME="${HOSTNAME}.sql"
EXCLUDE="sites/default/files/legacy"
# Below can be set as environment variables
BUPDIR="${BUPDIR:-/var/backups/wordpress}"
FULLBUPDIR=""
KEEP=${KEEP:-28}
RESTIC=${RESTIC:-/usr/local/bin/restic}
TEASER="${HOSTNAME} (${BACKUPTYPE}) at ${SITEURL}"
SITEURL=""
WPARGS="--path=\"${WEBROOT}\" --allow-root"

function rotate-db-backups {
    local h i
	echo "Rotate db backups"
	i=$KEEP
	while [ $i -gt 0 ]
	do
		if [ $i -gt 1 ]; then
			h=$[i-1]
			if [ -f ${HOSTNAME}.${h}.sql.gz ]; then
				mv ${HOSTNAME}.${h}.sql.gz \
                ${HOSTNAME}.${i}.sql.gz \
                >/dev/null 2>&1
			fi
		else
			if [ -f ${HOSTNAME}.sql.gz ]; then
				mv ${HOSTNAME}.sql.gz \
                ${HOSTNAME}.1.sql.gz \
                >/dev/null 2>&1
			fi
		fi
		(( i-- ))
	done
}

function rotate-dbonly-backups {
    local h i
	echo "Rotate dbonly backups"
	i=$KEEP
	while [ $i -gt 0 ]
	do
		if [ $i -gt 1 ]; then
			h=$[i-1]
			if [ -f ${HOSTNAME}-dbonly.${h}.sql.gz ]; then
				mv ${HOSTNAME}-dbonly.${h}.sql.gz \
                ${HOSTNAME}-dbonly.${i}.sql.gz \
                >/dev/null 2>&1
			fi
		else
			if [ -f ${HOSTNAME}-dbonly.sql.gz ]; then
				mv ${HOSTNAME}-dbonly.sql.gz \
                ${HOSTNAME}-dbonly.1.sql.gz \
                >/dev/null 2>&1
			fi
		fi
		(( i-- ))
	done
}

# Look for the wp-cli binary, if found then run test to see if wp installed
function wp-check {
    ssh -q ${HOSTNAME} \
        "wp --quiet \
        ${WPARGS} \
        core is-installed" \
        < /dev/null
    if [ ! $? -eq 0 ]; then
        notify-critical "${HOSTNAME} \
            WP does not appear to be running. What the heck?"
        exit 1
    else 
        return 0
    fi
    SITEURL=$(ssh ${HOSTNAME} \
        "wp ${WPARGS} \
        option get siteurl")
}

function dump-db {
    ssh ${HOSTNAME} "wp ${WPARGS} \
        db export ${WEBROOT}/../${DBFNAME}"
    if [ ! $? -eq 0  ]; then
        notify-critical "Database export failed for ${TEASER}" 
        exit 1
    fi
    ssh ${HOSTNAME} "gzip -vf ${WEBROOT}/../${DBFNAME}"
    if [ ! $? -eq 0  ]; then
        notify-critical "Backup gzip failed for ${TEASER}" 
        exit 1
    fi
    scp ${HOSTNAME}:${WEBROOT}/../${DBFNAME}.gz .
    if [ ! $? -eq 0  ]; then
        notify-critical "DB scp failed for ${TEASER}" 
        exit 1
    fi
}

function check-args {
    if [ "$HOSTNAME" == "full" ] \
        || [ "$HOSTNAME" == "db" ] \
        || [ "$HOSTNAME" == "manual" ] \
        || [ "$HOSTNAME" == "tmp" ]; then
        notify-critical "Error in first argument, \
            ${HOSTNAME} ${BACKUPTYPE} backup."
        exit 1
    fi
}

function set-backup-dir {
    if [ ${BACKUPTYPE} == "db" ]; then
        DBFNAME=${HOSTNAME}-dbonly.sql
    elif [ ${BACKUPTYPE} == "manual" ]; then
        local DATESTAMP=$(date +%F)
        DBFNAME="${HOSTNAME}-${DATESTAMP}.sql"
        BUPDIR="${BUPDIR}/manual"
	    FULLBUPDIR="${BUPDIR}/${HOSTNAME}-${DATESTAMP}"
    elif [ ${BACKUPTYPE} == "full" ]; then
	    FULLBUPDIR="${BUPDIR}/${HOSTNAME}"
    elif [ ${BACKUPTYPE} == "tmp" ]; then
        BUPDIR="/tmp"
	    FULLBUPDIR="${BUPDIR}/${HOSTNAME}"
    fi
    [ ! -d $BUPDIR ] && mkdir $BUPDIR
    cd ${BUPDIR}
    pwd
}

function sync-files {
	[ ! -d $FULLBUPDIR ] && mkdir $FULLBUPDIR
	rsync \
		-ptLr \
		--exclude=${EXCLUDE} \
		${HOSTNAME}:${WEBROOT} \
		${FULLBUPDIR}
    if [ ! $? -eq 0  ]; then
        notify-critical "File sync failed for ${TEASER}" 
        exit 1
    fi
}

function restic-check {
	if [ -f "$RESTIC" ] && [ -f "${HOME}/.wp-admin" ]; then
		. "${HOME}/.wp-admin"
	else
		notify-critical \
            "Restic or ~/.wp-admin config file not found \
            for ${USER}@${HOSTNAME}, backup to s3 for ${HOSTNAME} \
            is not happening."
	fi
}

function backup-full {
	$RESTIC backup ${FULLBUPDIR}/ --tag ${HOSTNAME}
    [ ! $? -eq 0  ] && notify-critical "Restic error"
}

function backup-db {
	$RESTIC backup ${DBFNAME}.gz --tag ${HOSTNAME}
    [ ! $? -eq 0  ] && notify-critical "Restic error"
}

check-args 
set-backup-dir
wp-check
echo "Proceeding with backup for ${HOSTNAME}."

if [ ${BACKUPTYPE} = "db" ]; then
	echo "Database backup, skipping full sync."
    rotate-dbonly-backups
    dump-db
elif [ ${BACKUPTYPE} = "tmp" ]; then
	echo "Backup db to /tmp, skipping restic. \
        This backup will not be written to s3."
    dump-db
    sync-files
elif [ ${BACKUPTYPE} = "manual" ]; then
	echo "Skipping restic. \
        This backup will not be written to s3."
    dump-db
    sync-files
else
    restic-check
    rotate-db-backups
    dump-db
    backup-db
    sync-files
    backup-full
	notify-screenshot \
	    "$SITEURL" "Backup (${BACKUPTYPE}) completed for ${SITEURL}. \
        Post-backup screenshot:"
fi

exit 0
