#!/bin/bash

if ! mkdir -p ~/tmp/wordpress-backup.lock; then
    printf "Failed to aquire lock.\n" >&2
    exit 1
fi
trap 'rm -rf ~/tmp/wordpress-backup.lock' EXIT  # remove the lockdir on exit


source $HOME/.wp-admin
args="${3:-/var/www/html}"
target=${1}.sql
backupDir="/var/backups/wp-db-backups"
backupsToKeep=28

# Check if there is a first argument
if [  ${1+x} ]; then
	if [ $1 == "daily" ] || [ $1 == "hourly" ] || [ $1 == "manual" ] || [ $1 == "tmp" ]; then
		notify-critical "Error in first argument, $1 $2 backup."
		exit 1
	fi
else
	notify-critical "Missing first argument $1 $2 backup."
	exit 1
fi

function rotate()
{
	i=$backupsToKeep
	while [ $i -gt 0 ]
	do
		if [ $i -gt 1 ]; then
			h=$[i-1]
			mv ${1}.${h}.sql.gz ${1}.${i}.sql.gz >/dev/null 2>&1
		else
			mv ${1}.sql.gz ${1}.1.sql.gz >/dev/null 2>&1
		fi
		(( i-- ))
	done
}

# Next line checks if there is a second argument
if [ ${2+x} ]; then
	if [ $2 == "daily" ]; then
		cd ${backupDir}/daily
		rotate $1
	elif [ $2 == "hourly" ]; then
		cd ${backupDir}/hourly
		rotate $1
	elif [ $2 == "tmp" ]; then
		cd /tmp
		rotate $1
	fi
else
	# Set second positional argument
	set -- ${1} "manual"
	cd ${backupDir}/manual
	rotate $1
fi

# Look for the wp-cli binary, if found then run test to see if wp installed
ssh -q ${1} "\
	[ -f /usr/local/bin/wp ] \
	&& wp --quiet $args core is-installed \
	|| exit 1" < /dev/null
if [ ! $? -eq 0 ]; then
	notify-critical "${1} is not online. What the heck?"
	exit 1
fi
siteurl=$(ssh ${1} "wp $args option get siteurl")
# Failover to 4th argument for dreamhost:
# siteurl="${siteurl:-$4}"

ssh ${1} "wp --quiet ${args} db export /var/www/${target}"
if [ ! $? -eq 0  ]; then
	notify-critical "Backup export failed for ${1} (${2}) at ${siteurl}" 
	exit 1
fi
ssh ${1} "gzip -f /var/www/${target}"
if [ ! $? -eq 0  ]; then
	notify-critical "Backup gzip failed for ${1} (${2}) at ${siteurl}" 
	exit 1
fi
scp -q ${1}:/var/www/${target}.gz .

restic=/usr/local/bin/restic
if [ ! -f $restic ]; then
	notify-critical "Restic binary not found on ${HOSTNAME}"
elif [ ! -f ~/.wp-admin ]; then
	notify-critical "~/.wp-admin config file not found on ${USER}@${HOSTNAME}, backup to s3 disabled for ${1}."
elif [ ${2} = "hourly" ]; then
	:
elif [ ${2} = "tmp" ]; then
	:
elif [ ${2} = "dreamhost" ]; then
	fullBackupDir="/var/backups/wp-full-backups/${1}"
	[ ! -d $fullBackupDir ] && mkdir ${fullBackupDir}
	rsync -ptLr --exclude='sites/default/files/legacy' ${1}:${3} ${fullBackupDir}
	# $restic backup ${fullBackupDir}/ --tag ${1}
	# $restic backup ${target}.gz --tag ${1} || $restic prune
	notify-screenshot "$siteurl" "Backup (${2}) completed for ${siteurl}. Post-backup screenshot:"
else
	fullBackupDir="/var/backups/wp-full-backups/${1}"
	[ ! -d $fullBackupDir ] && mkdir ${fullBackupDir}
	rsync -ptLr --exclude='sites/default/files/legacy' ${1}:/var/www/html ${fullBackupDir}
	$restic backup ${fullBackupDir}/html --tag ${1} || $restic prune
	$restic backup ${target}.gz --tag ${1} || $restic prune
	notify-screenshot "$siteurl" "Backup (${2}) completed for ${siteurl}. Post-backup screenshot:"
fi

notify-log "Backup completed for ${1} (${2})" 
exit 0
