#!/bin/bash
USAGE="
$(basename $0) Version 0.2.2

Usage: wordpress-backup HOSTNAME BACKUPTYPE [WEBROOT]
Where:
- HOSTNAME must be available in ssh config
- BACKUPTYPE can be one of:
    - full: backup webroot and db to s3, rotated
    - manual: full backup to BUPDIR/manual and s3, not rotated
    - db: backup db to admin server
    - tmp: backup db and webroot to /tmp on admin server
- WEBROOT is optional, defaults to /var/www/html

Note: if WEBROOT is not supplied then wordpress-permissions 
will be run to set ownership to the dev user. Add the WEBROOT
parameter to suppress this action.

Configure Restic for s3
=======================
Create two buckets on s3 with an IAM user for each.
Create two files in ~/.wp-admin-config/:
    - restic-full.conf
    - restic-manual.conf
Each file needs the following vars:
    - export RESTIC_REPOSITORY
    - export RESTIC_PASSWORD
    - export AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY
"

# Print USAGE if no args
if [ $# -eq 0 ]; then
    echo "$USAGE"
    exit 1
fi
# Check if already running
if ! mkdir -p ~/tmp/wordpress-backup.lock; then
	echo "$(date) Failed to acquire lock. (Script already running?)"
	exit 1
fi
# Remove the lockdir on exit
trap 'rm -rf ~/tmp/wordpress-backup.lock' EXIT	

HOSTNAME="$1"
# Set defaults if arguments absent
BACKUPTYPE="${2:-manual}"
WEBROOT="${3:-/var/www/html}"
DBFNAME="${HOSTNAME}.sql"
EXCLUDE="sites/default/files/legacy"
# Below can be set as environment variables
BUPDIR="${BUPDIR:-/var/backups/wordpress}"
FULLBUPDIR=""
KEEP=${KEEP:-28}
RESTIC=${RESTIC:-/usr/local/bin/restic}
TEASER="${HOSTNAME} (${BACKUPTYPE}) at ${SITEURL}"
SITEURL=""
WPARGS="--path=${WEBROOT} --allow-root --skip-themes"
RESTIC_REPOSITORY=""
RESTIC_PASSWORD=""

function restic-check {
	if [ -f "$RESTIC" ]; then
        if [ "$BACKUPTYPE" == "full" ]; then
		    . "${HOME}/.wp-admin-config/restic-full.conf"
            [ $? -eq 0 ] || { echo "$(date) Missing configuration"; exit 1; }
        elif [ "$BACKUPTYPE" == "manual" ]; then 
		    . "${HOME}/.wp-admin-config/restic-manual.conf"
            [ $? -eq 0 ] || { echo "$(date) Missing configuration"; exit 1; }
        fi
	else
		notify \
            "Restic or wp-admin.conf file not found for ${USER}@${HOSTNAME}, backup to s3 for ${HOSTNAME} is not happening." critical
	fi
}

function wp-check {
# TODO check host is accessible over ssh
# TODO look for the wp-cli binary on the remote host
    ssh -q ${HOSTNAME} \
        "wp --quiet \
        ${WPARGS} \
        core is-installed" \
        < /dev/null
    if [ ! $? -eq 0 ]; then
        notify "${HOSTNAME} \
            WP does not appear to be running. What the heck?" \
            critical
        exit 1
    fi
    SITEURL=$(ssh ${HOSTNAME} \
        "wp ${WPARGS} \
        option get siteurl")
    [ -z "$SITEURL" ] && { echo "$(date) SITEURL is empty."; exit 1; }
}

function check-args {
    if [ "$HOSTNAME" == "full" ] \
        || [ "$HOSTNAME" == "db" ] \
        || [ "$HOSTNAME" == "manual" ] \
        || [ "$HOSTNAME" == "tmp" ]; then
        notify "Error in first argument, ${HOSTNAME} (arg1) ${BACKUPTYPE} (arg 2) backup." critical
        exit 1
    fi
    if [ "$BACKUPTYPE" != "full" ] \
        && [ "$BACKUPTYPE" != "db" ] \
        && [ "$BACKUPTYPE" != "manual" ] \
        && [ "$BACKUPTYPE" != "tmp" ]; then
        notify "Error in second argument, ${HOSTNAME} (arg 1) ${BACKUPTYPE} (arg 2) backup." critical
        exit 1
    fi
}

function set-backup-dir {
    case "$BACKUPTYPE" in
    "db") 
        DBFNAME=${HOSTNAME}-dbonly.sql
        ;;
    "manual") 
        local DATESTAMP=$(date +%F)
        DBFNAME="${HOSTNAME}-${DATESTAMP}.sql"
        BUPDIR="${BUPDIR}/manual"
	    FULLBUPDIR="${BUPDIR}/${HOSTNAME}-${DATESTAMP}"
        ;;
	"full") 
        FULLBUPDIR="${BUPDIR}/${HOSTNAME}"
        ;;
    "tmp") 
        BUPDIR="/tmp"
	    FULLBUPDIR="${BUPDIR}/${HOSTNAME}"
        ;;
    esac
    [ ! -d $BUPDIR ] && mkdir $BUPDIR
    cd ${BUPDIR}
    pwd
}

function rotate-db-backups {
    local I N FNAME
    # Trim off the file extension
    FNAME="${DBFNAME%'.sql'}"
	echo "$(date) Rotate db backups ($FNAME)."
	I=$KEEP
	while [ $I -gt 0 ]
	do
		if [ $I -gt 1 ]; then
			H=$[I-1]
			if [ -f ${FNAME}.${H}.sql.gz ]; then
				mv ${FNAME}.${H}.sql.gz \
                ${FNAME}.${I}.sql.gz \
                >/dev/null 2>&1
			fi
		else
			if [ -f ${FNAME}.sql.gz ]; then
				mv ${FNAME}.sql.gz \
                ${FNAME}.1.sql.gz \
                >/dev/null 2>&1
			fi
		fi
		(( I-- ))
	done
}

function dump-db {
    ssh ${HOSTNAME} "wp ${WPARGS} \
        db export ${WEBROOT}/../${DBFNAME}"
    if [ ! $? -eq 0  ]; then
        notify "Database export failed for ${TEASER}" critical
        exit 1
    fi
    ssh ${HOSTNAME} "gzip -vf ${WEBROOT}/../${DBFNAME}"
    if [ ! $? -eq 0  ]; then
        notify "Backup gzip failed for ${TEASER}" critical
        exit 1
    fi
    scp ${HOSTNAME}:${WEBROOT}/../${DBFNAME}.gz .
    if [ ! $? -eq 0  ]; then
        notify "DB scp failed for ${TEASER}" critical
        exit 1
    fi
}

function sync-files {
	[ ! -d $FULLBUPDIR ] && mkdir $FULLBUPDIR
    echo "$(date) Sync from ${HOSTNAME}"
	rsync \
        -ptLr \
        --exclude=${EXCLUDE} \
        --delete \
        ${HOSTNAME}:${WEBROOT} \
        ${FULLBUPDIR}
    chown "$USER:developers" -R "$FULLBUPDIR"
    find "$FULLBUPDIR" -type f -exec chmod 660 {} +; \
    find "$FULLBUPDIR" -type d -exec chmod 770 {} +;

    if [ ! $? -eq 0  ]; then
        notify "File sync failed for ${TEASER}" critical
    fi
}

function backup-full {
	$RESTIC backup ${FULLBUPDIR}/ --tag ${HOSTNAME}
    [ ! $? -eq 0  ] && notify "Restic error for ${HOSTNAME}" critical
}

function backup-db {
	$RESTIC backup ${DBFNAME}.gz --tag ${HOSTNAME}
    [ ! $? -eq 0  ] && notify "Restic error ${HOSTNAME}" critical
}

function set-permissions {
    if [ -z "$3" ]; then
        wordpress-permissions "$HOSTNAME" dev
    fi
}

set-permissions "$@"
check-args 
set-backup-dir
wp-check
echo "$(date) Proceeding with backup for ${HOSTNAME}."

if [ ${BACKUPTYPE} = "db" ]; then
	echo "$(date) Database backup, skipping full sync."
    rotate-db-backups
    dump-db
elif [ ${BACKUPTYPE} = "tmp" ]; then
	echo "$(date) Backup db to /tmp, skipping restic."
    echo "$(date) This backup will not be written to s3."
    dump-db
    sync-files
elif [ ${BACKUPTYPE} = "manual" ]; then
    restic-check
    dump-db
    backup-db
    sync-files
    backup-full
    notify "Backup (${BACKUPTYPE}) completed for ${SITEURL}. Post-backup screenshot:" "$SITEURL" 
else
    restic-check
    rotate-db-backups
    dump-db
    backup-db
    sync-files
    backup-full
    notify "Backup (${BACKUPTYPE}) completed for ${SITEURL}. Post-backup screenshot:" "$SITEURL" 
fi
if [ ! $? -eq 0  ]; then
    notify "Screenshot tweet failed for ${TEASER}" critical
    exit 1
fi

exit 0
