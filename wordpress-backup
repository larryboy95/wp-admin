#!/bin/bash

if ! mkdir -p ~/tmp/wordpress-backup.lock; then
	printf "Failed to aquire lock. (Script already running?)\n" >&2
	exit 1
fi
trap 'rm -rf ~/tmp/wordpress-backup.lock' EXIT	# remove the lockdir on exit


# Is there a first argument
if [  ${1+x} ]; then
	HOST=${1}
else
	notify-critical "Missing first argument ${HOST} ${TYPE} backup."
	exit 1
fi
TYPE="${2:-manual}"
WEBROOT="${3:-/var/www/html}"
TARGET=${HOST}.sql
EXCLUDE="sites/default/files/legacy"
# Below can be set as environment variables
BUPDIR="${BUPDIR:-/var/backups/wp-db-backups}"
FULLBUPDIR="${FULLBUPDIR:-/var/backups/wp-full-backups}"
KEEP=${KEEP:-28}
RESTIC=${RESTIC:-/usr/local/bin/restic}

function rotate()
{
	echo "Rotate db backups"
	i=$KEEP
	while [ $i -gt 0 ]
	do
		if [ $i -gt 1 ]; then
			h=$[i-1]
			if [ -f ${HOST}.${h}.sql.gz ]; then
				mv ${HOST}.${h}.sql.gz ${HOST}.${i}.sql.gz >/dev/null 2>&1
			fi
		else
			if [ -f ${HOST}.sql.gz ]; then
				mv ${HOST}.sql.gz ${HOST}.1.sql.gz >/dev/null 2>&1
			fi
		fi
		(( i-- ))
	done
}

if [ ${HOST} == "daily" ] \
    || [ ${HOST} == "hourly" ] \
    || [ ${HOST} == "manual" ] \
    || [ ${HOST} == "tmp" ]; then
	notify-critical "Error in first argument, ${HOST} ${TYPE} backup."
	exit 1
fi

if [ ${TYPE} == "daily" ] \
    || [ ${TYPE} == "hourly" ] \
    || [ ${TYPE} == "manual" ] \
    || [ ${TYPE} == "tmp" ]; then
	BUPDIR=${BUPDIR}/${TYPE}
	[ ! -d $BUPDIR ] && mkdir $BUPDIR
    cd ${BUPDIR}
    rotate ${HOST}
fi

# Look for the wp-cli binary, if found then run test to see if wp installed
ssh -q ${HOST} "wp --quiet --path=\"${WEBROOT}\" core is-installed" < /dev/null
# Check if the exit code from last command ^^ is non zero
if [ ! $? -eq 0 ]; then
	notify-critical "${HOST} WP does not appear to be running. What the heck?"
	exit 1
else 
	siteurl=$(ssh ${HOST} "wp --path=\"${WEBROOT}\" option get siteurl")
	echo "Proceeding with backup for ${HOST}."
fi

# Save a new db dump one level up from the webroot
ssh ${HOST} "wp --path=\"${WEBROOT}\" db export ${WEBROOT}/../${TARGET}"
if [ ! $? -eq 0  ]; then
	notify-critical "Database export failed for ${HOST} (${TYPE}) at ${siteurl}" 
	exit 1
fi

ssh ${HOST} "gzip -vf ${WEBROOT}/../${TARGET}"
if [ ! $? -eq 0  ]; then
	notify-critical "Backup gzip failed for ${HOST} (${TYPE}) at ${siteurl}" 
	exit 1
fi

# Copy gzipped db backup to admin server
scp ${HOST}:${WEBROOT}/../${TARGET}.gz .

if [ ${TYPE} = "hourly" ]; then
	echo "Hourly backup, skipping full sync."
elif [ ${TYPE} = "tmp" ]; then
	echo "Temporary backup, skipping full sync."
else
	FULLBUPDIR="${FULLBUPDIR}/${HOST}"
	[ ! -d $FULLBUPDIR ] && mkdir $FULLBUPDIR
	rsync \
		-ptLr \
		--exclude=${EXCLUDE} \
		${HOST}:${WEBROOT} \
		${FULLBUPDIR}
	if [ -f $RESTIC ] && [ -f ~/.wp-admin ]; then
		source $HOME/.wp-admin
		$RESTIC backup ${FULLBUPDIR}/ --tag ${HOST}
		$RESTIC backup ${TARGET}.gz --tag ${HOST}
	else
		notify-critical \
		"Restic or ~/.wp-admin config file not found for ${USER}@${HOSTNAME}, backup to s3 for ${HOST} is not happening."
	fi
	notify-screenshot \
	"$siteurl" "Backup (${TYPE}) completed for ${siteurl}. Post-backup screenshot:"
fi

notify-log "Backup completed for ${HOST} (${TYPE})" 
exit 0
