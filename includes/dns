#!/bin/bash

function do_dns_check {
    local DNSRAW DNSID RECORDS DOMAIN FQDN
    . "$CONFIGPARSE"
    RECORDS=$(
        doctl compute domain records list "$DOMAIN" \
        --format "id,name" -o json
    )
    DNSID=$(
        echo "$RECORDS" \
        | jq '.[] | select(.name | contains("$FDQN")) | .id'
    )
    if [ -z "$DNSID" ]; then
        echo "No matching DNS record."
        return 0
    else
        return 1
    fi
}

function do_dns_delete {
    local FQDN RECORDS DNSID DOMAIN
    . "$CONFIGPARSE"
    RECORDS=$(
        doctl compute domain records list "$DOMAIN" \
        --format "id,name" -o json
    )
    echo "$RECORDS"
    DNSID=$(
        echo "$RECORDS" \
        | jq '.[] | select(.name | contains("$FQDN")) | .id'
    )
    [ -z "$DNSID" ] && { echo "No matching records."; exit 0; }
    echo "$DNSID"
    echo "$DNSID" | xargs doctl compute domain records delete "$DOMAIN" -f
}

function do_dns_add {
    local DNSRAW DNSID
    . "$CONFIGPARSE"
    [ -z "$DROPLETADDR" ] && { "IP not set"; return 1; }
    echo "Setup subdomain with Digitalocean DNS."
    while true; do
        DNSRAW=$(doctl compute domain records \
            create "${DOMAIN}" \
            -t "${DOTOKEN}" \
            --record-type A \
            --record-name "${SUBDOMAIN}" \
            --record-data "${DROPLETADDR}" \
            -o json
            )
        if [ ! $? -eq 0 ]; then
            echo "Error creating dns record."
        else
            break
        fi
    done
    DNSID=$(echo "${DNSRAW}" | jq '.[0] .id')
    if [ ! $? -eq 0 ] || [ -z "$DNSID" ]; then
        echo "Error parsing JSON."
        echo "${DNSRAW}"
        echo "${DNSID}"
        return 1
    fi
    DNSID=$(echo "${DNSID}" | tr -d '\n')
    if [ -z "$DNSID" ]; then
        echo "DNSID is empty."
        return 1
    else
        echo "DNS A record for ${FQDN} to ${DROPLETADDR} was created."
    fi
    return 0
}
