#!/bin/bash

# Wait for the new droplet to become ready
function connection_test {
    . "$CONFIGPARSE"
    echo -ne "Wait for the droplet to become available..."
    while true; do
        ssh -o ConnectTimeout=3 -q "${HOSTNAME}" \
            "[ -f /var/lib/cloud/instance/boot-finished ]"
        if [ $? -eq 0 ]; then
            sleep 1
            echo -ne "\r"
            break
        else
            echo -ne "."
            sleep 1
        fi
    done
}

function ansible_check_host {
    local HOSTPATTERN ANSIBLEHOSTS
    . "$CONFIGPARSE"
    HOSTPATTERN="^${HOSTNAME} "
    if grep -q "$HOSTPATTERN" "${ANSIBLEHOSTS}"; then
        echo "${HOSTNAME} was found in ${ANSIBLEHOSTS}"
        return 1
    else
        echo "${HOSTNAME} was not found in ${ANSIBLEHOSTS}"
        return 0
    fi
}

function ansible_add_host {
    local HOSTPATTERN ANSIBLEHOSTS
    . "$CONFIGPARSE"
    HOSTPATTERN="^${HOSTNAME} "
    echo "Adding ${HOSTNAME} to ${ANSIBLEHOSTS}"
    echo "${HOSTNAME} ansible_port=22 ansible_host=${DROPLETADDR}" >> "${ANSIBLEHOSTS}"
}

function ssh_config_check {
    local HOSTPATTERN
    . "$CONFIGPARSE"
    HOSTPATTERN="^Host ${HOSTNAME}$"
    if grep "$HOSTPATTERN" "${SSHHOSTS}"; then
        grep "$HOSTPATTERN" -A5 "${SSHHOSTS}"
        echo "${HOSTNAME} was found in ${SSHHOSTS}"
        connection_test "$@"
        return 1
    else
        return 0
    fi
}

function ssh_config_add_host {
    . "$CONFIGPARSE"
    echo "Host ${HOSTNAME}
    HostName ${DROPLETADDR}
    User root
    IdentityFile ${PRIVATEKEY}
    IdentitiesOnly yes
    StrictHostKeyChecking no
    " >> "${SSHHOSTS}"
}

