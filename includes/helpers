#!/bin/bash

# Wait for the new droplet to become ready
function connection_test {
    . "$CONFIGPARSE"
    echo -ne "Wait for the droplet to become available..."
    while true; do
        ssh -o ConnectTimeout=3 -q "${HOSTNAME}" \
            "[ -f /var/lib/cloud/instance/boot-finished ]"
        if [ $? -eq 0 ]; then
            sleep 1
            echo -ne "\r"
            break
        else
            echo -ne "."
            sleep 1
        fi
    done
}

function ansible_check_host {
    local HOSTPATTERN ANSIBLEHOSTS
    . "$CONFIGPARSE"
    HOSTPATTERN="^${HOSTNAME} "
    if grep -q "$HOSTPATTERN" "${ANSIBLEHOSTS}"; then
        echo "${HOSTNAME} was found in ${ANSIBLEHOSTS}"
        return 0
    else
        echo "${HOSTNAME} was not found in ${ANSIBLEHOSTS}"
        return 1
    fi
}

function ansible_add_host {
    local HOSTPATTERN ANSIBLEHOSTS
    . "$CONFIGPARSE"
    HOSTPATTERN="^${HOSTNAME} "
    echo "Adding ${HOSTNAME} to ${ANSIBLEHOSTS}"
    echo "${HOSTNAME} ansible_port=22 ansible_host=${FQDN}" >> "${ANSIBLEHOSTS}"
    [ ! $? -eq 0 ] && return 1
    return 0
}

function ssh_config_check {
    local HOSTPATTERN
    . "$CONFIGPARSE"
    HOSTPATTERN="^Host ${HOSTNAME}$"
    if grep "$HOSTPATTERN" "${SSHHOSTS}"; then
        grep "$HOSTPATTERN" -A5 "${SSHHOSTS}"
        echo "${HOSTNAME} was found in ${SSHHOSTS}"
        connection_test "$@"
        return 1
    else
        return 0
    fi
}

function ssh_config_add_host {
    . "$CONFIGPARSE"
    echo "Host ${HOSTNAME}
    HostName ${DROPLETADDR}
    User root
    IdentityFile ${PRIVATEKEY}
    IdentitiesOnly yes
    " >> "${SSHHOSTS}"
}

function do_add_record {
    local DNSRAW DNSID
    . "$CONFIGPARSE"
    echo "Setup subdomain with Digitalocean DNS."
    DNSRAW=$(doctl compute domain records \
        create "${DOMAIN}" \
        -t "${DOTOKEN}" \
        --record-type A \
        --record-name "${SUBDOMAIN}" \
        --record-data "${DROPLETADDR}" \
        -o json
        )
    if [ ! $? -eq 0 ]; then
        echo "Error creating dns record."
        return 1
    fi
    DNSID=$(echo "${DNSRAW}" | jq '.[0] .id')
    if [ ! $? -eq 0 ] || [ -z "$DNSID" ]; then
        echo "Error parsing JSON."
        echo "${DNSRAW}"
        echo "${DNSID}"
        return 1
    fi
    DNSID=$(echo "${DNSID}" | tr -d '\n')
    if [ -z "$DNSID" ]; then
        echo "DNSID is empty."
        return 1
    else
        echo "DNS A record for ${FQDN} to ${DROPLETADDR} was created."
    fi
    return 0
}
