#!/bin/bash

if [ $# -eq 0 ]; then
    echo "

Usage: do-new-wp CONFIGFILE

Config file vars, required:
NAME (alphanumeric and dashes only) 
FQDN (fully qualified domain name)
EMAIL
DOTOKEN
PUBLICKEY

ADMINIP is automatically pulled from eth0

Optional vars and their default values:
SSHHOSTS ~/.ssh/config
SIZE s-1vcpu-1gb
IMAGE ubuntu-16-04-x64
REGION sfo2
"
    exit 1
fi
# Include the config file
. $1

ADMINIP="$(ifconfig | grep -A 1 'eth0' | tail -1 | cut -d ':' -f 2 | cut -d ' ' -f 1)"
SCRIPTDIR=$(dirname ${0})

# Set default values
SSHHOSTS=${SSHHOSTS:-~/.ssh/config}
ANSHOSTS=${ANSHOSTS:-/etc/ansible/hosts}
SIZE=${SIZE:-s-1vcpu-1gb}
IMAGE=${IMAGE:-ubuntu-16-04-x64}
REGION=${REGION:-sfo2}
WPUSER=${WPUSER:-admin}
# add ses creds
# generate db/wp passwords
MYSQLROOTPASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 18 | head -n 1)
MYSQLWPPASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 18 | head -n 1)

# Check if the name is already taken
if grep -w ${NAME} ${SSHHOSTS}; then
    echo "${NAME} found in current ssh config, exiting"
    exit 1
fi

# Provision the droplet
echo "Provisioning new droplet for ${NAME}"
DID=$(doctl compute droplet create \
    ${NAME} \
    -o json \
    -t ${DOTOKEN} \
    --ssh-keys ${PUBLICKEY} \
    --size ${SIZE} \
    --image ${IMAGE} \
    --region ${REGION} \
    --enable-backups \
    --enable-monitoring \
    | jq '.[0] .id' | tr -d '\n')

if [ ! $? -eq 0 ]; then
    echo "Error provisioning droplet"
    exit 1
else
    echo "Wait five seconds for the droplet to be created..."
    sleep 5
fi

# Get IP from DO
# and remove dbl quotes from string
echo "Getting IP from droplet ${DID}"
DIP=$(doctl compute droplet get ${DID} -t ${DOTOKEN} -o json \
    | jq '.[0] .networks.v4[0].ip_address' | tr -d '\n')
DIP=$(echo "$DIP" | tr -d '"')

# Setup ssh config file
echo "Adding ${NAME} to ssh config file."
echo "Host ${NAME}
    HostName ${DIP}
    User root
    IdentityFile=~/.ssh/id_rsa
    IdentitiesOnly yes
" >> ${SSHHOSTS}

grep ${NAME} -A5 ${SSHHOSTS}

# Setup ansible hosts file
echo "${NAME} ansible_port=22 ansible_host=${DIP}" >> ${ANSHOSTS}
if [ ! $? -eq 0 ]; then
    echo "Error writing to ${ANSHOSTS}"
    exit 1
fi

echo -ne "Wait for the droplet initialisation to complete..."
sleep 10
while true; do
    ssh -o ConnectTimeout=3 -q ${NAME} "[ -f /var/lib/cloud/instance/boot-finished ]"
    if [ $? -eq 0 ]; then
        sleep 1
        echo "Boot finished."
        break
    else
        echo -ne "."
        sleep 1
    fi
done

echo "Install prerequisite packages."
while true; do
    ssh -o ConnectTimeout=3 ${NAME} "apt-get -y -q install python ssl-cert"
    if [ $? -eq 0 ]; then
        sleep 3
        break
    else
        echo "Error installing packages, trying again..."
    fi
done

# Run ansible playbook to set up servers
cd ${SCRIPTDIR}/ansible
ansible-playbook wordpress.yml --extra-vars "
        mysql_root_password=${MYSQLROOTPASSWORD}
        mysql_wp_password=${MYSQLWPPASSWORD}
        fqdn=${FQDN}
        --limit ${NAME}"

# Run wordpress-install new / clone repo
cd ${SCRIPTDIR}
wordpress-install ${NAME} ${FQDN} ${WPUSER} ${EMAIL}
# Uploads dir??

# Offer to delete the droplet
doctl compute droplet delete $DID

#doctl compute droplet list \
#    -o json \
#    | jq '.[] | select(.name=="${NAME}") | .id' 

exit 0
