#!/bin/bash

if [ $# -eq 0 ]; then
    echo "

Usage: do-new-wp CONFIGFILE
Provisions a new droplet at Digitalocean and installs WordPress.

Config file vars required, (see do-new-wp.conf.example):
    NAME (alphanumeric and dashes only) 
    DOMAIN
    SUBDOMAIN
    EMAIL
    DOTOKEN
    PUBLICKEY

ADMINIP is automatically obtained from eth0

Optional vars and their default values:
    SSHHOSTS ~/.ssh/config
    ANSHOSTS /etc/ansible/hosts
    PATHTOPRIVKEY ~/.ssh/id_rsa
    SIZE s-1vcpu-1gb
    IMAGE ubuntu-16-04-x64
    REGION sfo2
    WPUSER admin
"
    exit 1
fi
# Include the config file
. $1

ADMINIP="$(ifconfig | grep -A 1 'eth0' | tail -1 | cut -d ':' -f 2 | cut -d ' ' -f 1)"
SCRIPTDIR=$(dirname ${0})
if [ -z $NAME ] \
    && [ -z $DOMAIN ] \
    && [ -z $SUBDOMAIN ] \
    && [ -z $EMAIL ] \
    && [ -z $DOTOKEN ] \
    && [ -z $PUBLICKEY ]; then
    echo "Error, required variables not set. Check your config file."
    exit 1
else
    FQDN="${SUBDOMAIN}.${DOMAIN}"
fi
# Set default values for optional variables
SSHHOSTS=${SSHHOSTS:-~/.ssh/config}
ANSHOSTS=${ANSHOSTS:-/etc/ansible/hosts}
PATHTOPRIVKEY=${PATHTOPRIVKEY:-~/.ssh/id_rsa}
SIZE=${SIZE:-s-1vcpu-1gb}
IMAGE=${IMAGE:-ubuntu-16-04-x64}
REGION=${REGION:-sfo2}
WPUSER=${WPUSER:-admin}
# add ses creds
# generate db/wp passwords
MYSQLROOTPASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 18 | head -n 1)
MYSQLWPPASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 18 | head -n 1)

# Check if the name is already taken
if grep -w ${NAME} ${SSHHOSTS}; then
    echo "${NAME} was found in ${SSHHOSTS}, exiting."
    exit 1
elif grep -w ${NAME} ${ANSHOSTS}; then
    echo "${NAME} was found in ${ANSHOSTS}, exiting."
    exit 1 
fi

# Provision the droplet
# and remove dbl quotes from string
echo "Provisioning new droplet for ${NAME}."
DIDRAW=$(doctl compute droplet create \
    ${NAME} \
    -t ${DOTOKEN} \
    --ssh-keys ${PUBLICKEY} \
    --size ${SIZE} \
    --image ${IMAGE} \
    --region ${REGION} \
    --enable-backups \
    --enable-monitoring \
    -o json
    )
if [ ! $? -eq 0 ]; then
    echo "Error provisioning droplet."
    echo "${DIDRAW}"
    exit 1
fi
DIDRAW=$(echo "${DIDRAW}" | jq '.[0] .id')
if [ ! $? -eq 0 ]; then
    echo "Error parsing JSON."
    echo "${DIDRAW}"
    exit 1
fi
DID=$(echo "${DIDRAW}" | tr -d '\n')
if [ -z "$DID" ]; then
    echo "Droplet ID is empty."
    exit 1
else
    echo "Wait five seconds for the droplet to be created..."
    sleep 5
fi

# Get IP from DO
echo "Getting IP from droplet ${DID}."
DIPRAW=$(doctl compute droplet \
    get ${DID} \
    -t ${DOTOKEN} \
    -o json) 
if [ ! $? -eq 0 ]; then
    echo "Error retrieving droplet IP address."
    echo "${DIPRAW}"
    exit 1
fi
DIPRAW=$(echo "${DIPRAW}" | jq '.[0] .networks.v4[0].ip_address')
if [ ! $? -eq 0 ]; then
    echo "Error parsing JSON."
    echo "${DIPRAW}"
    exit 1
fi
DIP=$(echo "${DIPRAW}" | tr -d '\n' | tr -d '"')
if [ -z "$DIP" ]; then
    echo "IP address is empty?"
    exit 1
fi

# Setup ssh config file for Ansible
# Later we must modify this for a non-root user
# and non-standard port
echo "Adding ${NAME} to ssh config file:"
echo "Host ${NAME}
    HostName ${DIP}
    User root
    IdentityFile ${PATHTOPRIVKEY}
    IdentitiesOnly yes
" >> ${SSHHOSTS}
if [ ! $? -eq 0 ]; then
    echo "Error writing to ${SSHHOSTS}"
    exit 1
else
    # Echo the entry you just wrote
    grep -w ${NAME} -A5 ${SSHHOSTS}
fi

echo "Setup subdomain with Digitalocean DNS."
DNSRAW=$(doctl compute domain records \
    create ${DOMAIN} \
    --record-type A \
    --record-name ${SUBDOMAIN} \
    --record-data ${DIP} \
    -o json
    )
if [ ! $? -eq 0 ]; then
    echo "Error creating dns record."
    exit 1
fi
DNSRAW=$(echo "${DNSRAW}" | jq '.[0] .id')
if [ ! $? -eq 0 ]; then
    echo "Error parsing JSON."
    echo "${DNSRAW}"
    exit 1
fi
DNSID=$(echo "${DNSRAW}" | tr -d '\n')
if [ -z "$DNSID" ]; then
    echo "DNSID is empty."
    exit 1
else
    echo "DNS A record for ${FQDN} to ${DIP} was created."
fi
# Setup ansible hosts file
echo "${NAME} ansible_port=22 ansible_host=${DIP}" >> ${ANSHOSTS}
if [ ! $? -eq 0 ]; then
    echo "Error writing to ${ANSHOSTS}"
    exit 1
else
    # Echo the entry you just wrote
    grep -w ${NAME} ${ANSHOSTS}
fi

echo -ne "Wait for the droplet initialisation to complete..."
while true; do
    ssh -o ConnectTimeout=3 -q ${NAME} "[ -f /var/lib/cloud/instance/boot-finished ]"
    if [ $? -eq 0 ]; then
        sleep 1
        echo -ne "\r"
        break
    else
        echo -ne "."
        sleep 1
    fi
done

echo "Install prerequisite packages."
while true; do
    ssh -o ConnectTimeout=3 ${NAME} "DEBIAN_FRONTEND=noninteractive apt-get -y -q install python ssl-cert"
    if [ $? -eq 0 ]; then
        sleep 3
        break
    else
        echo "Error installing packages, trying again..."
    fi
done

# Run ansible playbook to set up servers
cd ${SCRIPTDIR}/ansible
ansible-playbook wordpress.yml --extra-vars "
        mysql_root_password=${MYSQLROOTPASSWORD}
        mysql_wp_password=${MYSQLWPPASSWORD}
        fqdn=${FQDN}
        email=${EMAIL}
        --limit ${NAME}"

# Run wordpress-install new / clone repo
cd ${SCRIPTDIR}
wordpress-install \
    ${NAME} \
    ${FQDN} \
    ${WPUSER} \
    ${EMAIL} \
    ${MYSQLWPPASSWORD}

# Change webroot permissions
ssh ${NAME} "chown -R www-data:www-data /var/www/html"

# Offer to delete the droplet
doctl compute droplet delete $DID

echo "
Root mysql password: ${MYSQLROOTPASSWORD}
Wordpress mysql password: ${MYSQLWPPASSWORD}
Test your new site at https://${DIP}
or https://${FQDN}
"

exit 0
