#!/bin/bash

USAGE="
Usage: do-new-wp CONFIGFILE
Provisions a new droplet at Digitalocean and installs WordPress.

Config file vars required, (see do-new-wp.conf.example):
    NAME (alphanumeric and dashes only) 
    DOMAIN
    SUBDOMAIN
    EMAIL
    DOTOKEN
    PUBLICKEY

ADMINIP is automatically obtained from eth0

Optional vars and their default values:
    SSHHOSTS ~/.ssh/config
    ANSHOSTS /etc/ansible/hosts
    PATHTOPRIVKEY ~/.ssh/id_rsa
    SIZE s-1vcpu-1gb
    IMAGE ubuntu-16-04-x64
    REGION sfo2
    WPUSER admin

Optional vars with no defaults.
Set these to trigger related feature.
    RESTICCODEBASE hash of target snapshot to restore
    RESTICDB hash of target db to restore
"

# Print USAGE if no args
if [ $# -eq 0 ]; then
    echo "$USAGE"
    exit 1
fi

function main {
# Include the config file
    . "$1"

# TODO add ses creds
# Check that required variables are set
    [ -z "$DOMAIN" ] && { echo "DOMAIN not set $DOMAIN"; exit 1; }
    [ -z "$SUBDOMAIN" ] && { echo "SUBDOMAIN not set $SUBDOMAIN"; exit 1; }
    [ -z "$EMAIL" ] && { echo "EMAIL not set $EMAIL"; exit 1; }
    [ -z "$DOTOKEN" ] && { echo "DOTOKEN not set $DOTOKEN"; exit 1; }
    [ -z "$PUBLICKEY" ] && { echo "PUBLICKEY not set $PUBLICKEY"; exit 1; }
    FQDN="${SUBDOMAIN}.${DOMAIN}"
    ADMINIP="$(ifconfig | grep -A 1 'eth0' | tail -1 | cut -d ':' -f 2 | cut -d ' ' -f 1)"
    SCRIPTDIR=$(dirname "${0}")
    RESTIC="/usr/local/bin/restic"
# Set default values for optional variables
    SSHHOSTS=${SSHHOSTS:-~/.ssh/config}
    ANSHOSTS=${ANSHOSTS:-/etc/ansible/hosts}
    PATHTOPRIVKEY=${PATHTOPRIVKEY:-~/.ssh/id_rsa}
    SIZE=${SIZE:-s-1vcpu-1gb}
    IMAGE=${IMAGE:-ubuntu-16-04-x64}
    REGION=${REGION:-sfo2}
    WPUSER=${WPUSER:-admin}
    MOUNTPOINT="${HOME}/.tmp-mount-do"
# Generate db passwords
    MYSQLROOTPASSWORD=$(tr -dc 'a-zA-Z0-9' < /dev/urandom | fold -w 18 | head -n 1)
    echo "$MYSQLROOTPASSWORD"
    MYSQLWPPASSWORD=$(tr -dc 'a-zA-Z0-9' < /dev/urandom | fold -w 18 | head -n 1)
    echo "$MYSQLWPPASSWORD"
    TMPDIR="/tmp/do-new-wp"
    [ ! -d "$TMPDIR" ] && mkdir "$TMPDIR"
# Cleanup on exit
    trap "rm -rf ${TMPDIR}" EXIT	

# Provision the droplet
# and remove dbl quotes from string
    echo "Provisioning new droplet for ${NAME}."
    DIDRAW=$(doctl compute droplet create \
        "${NAME}" \
        -t "${DOTOKEN}" \
        --ssh-keys "${PUBLICKEY}" \
        --size "${SIZE}" \
        --image "${IMAGE}" \
        --region "${REGION}" \
        --enable-backups \
        --enable-monitoring \
        -o json
        )
    if [ ! $? -eq 0 ]; then
        echo "Error provisioning droplet."
        echo "${DIDRAW}"
        exit 1
    fi
    DIDRAW=$(echo "${DIDRAW}" | jq '.[0] .id')
    if [ ! $? -eq 0 ]; then
        echo "Error parsing JSON."
        echo "${DIDRAW}"
        exit 1
    fi
    DID=$(echo "${DIDRAW}" | tr -d '\n')
    if [ -z "$DID" ]; then
        echo "Droplet ID is empty."
        exit 1
    else
        echo "Wait five seconds for the droplet to be created..."
        sleep 5
    fi

# See below for these functions
    DIP=$(droplet_get_ip $DID $DOTOKEN)
    ssh_config_add_host $NAME $SSHHOSTS $DIP $PATHTOPRIVKEY
    ansible_add_host $NAME $ANSHOSTS $DIP
    do_add_record $SUBDOMAIN $DOMAIN $DIP 

    echo -ne "Wait for the droplet initialisation to complete..."
    while true; do
        ssh -o ConnectTimeout=3 -q "${NAME}" \
            "[ -f /var/lib/cloud/instance/boot-finished ]"
        if [ $? -eq 0 ]; then
            sleep 1
            echo -ne "\r"
            break
        else
            echo -ne "."
            sleep 1
        fi
    done

    echo "Install prerequisite packages."
    while true; do
        ssh -o ConnectTimeout=3 "${NAME}" \
            "DEBIAN_FRONTEND=noninteractive apt-get -y -q install python ssl-cert"
        if [ $? -eq 0 ]; then
            sleep 3
            break
        else
            echo "Error installing packages, trying again..."
        fi
    done
# Install wp-cli on remote host
    ssh "$NAME" "curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar; chmod +x wp-cli.phar; mv wp-cli.phar /usr/local/bin/wp"

# Run ansible playbook to set up servers
    cd "${SCRIPTDIR}/ansible"
    ansible-playbook wordpress.yml --extra-vars "
        mysql_root_password=${MYSQLROOTPASSWORD}
        mysql_wp_password=${MYSQLWPPASSWORD}
        fqdn=${FQDN}
        email=${EMAIL}
        --limit ${NAME}"

# Run wordpress-install new / clone repo
    cd "${SCRIPTDIR}"
    wordpress-install \
        "${NAME}" \
        "${FQDN}" \
        "${WPUSER}" \
        "${EMAIL}" \
        "${MYSQLWPPASSWORD}"

# Preserve the fresh config file
    ssh "${NAME}" "cp /var/www/html/wp-config.php /var/www/wp-config.php.fresh"
# Change webroot permissions
    ssh "${NAME}" "chown -R www-data:www-data /var/www"

# Optionally restore a site from restic
    if [ -f ~/.wp-admin ] && [ ! -z "$RESTICCODEBASE" ]; then
        do-restore-wp "$NAME" "$RESTICCODEBASE" "$RESTICDB"
    fi

    echo "
    Root mysql password: ${MYSQLROOTPASSWORD}
    Wordpress mysql password: ${MYSQLWPPASSWORD}
    Droplet ID: ${DID}
    Test your new site at:
    https://${FQDN}
    "
}

function droplet_get_ip {
    local DID="$1"
    local DOTOKEN="$2"
    echo "Getting IP from droplet ${DID}."
    local DIPRAW=$(doctl compute droplet \
        get "${DID}" \
        -t "${DOTOKEN}" \
        -o json) 
    if [ ! $? -eq 0 ]; then
        echo "Error retrieving droplet IP address."
        echo "${DIPRAW}"
        exit 1
    fi
    local DIPRAW=$(echo "${DIPRAW}" | jq '.[0] .networks.v4[0].ip_address')
    if [ ! $? -eq 0 ]; then
        echo "Error parsing JSON."
        echo "${DIPRAW}"
        exit 1
    fi
    local DIP=$(echo "${DIPRAW}" | tr -d '\n' | tr -d '"')
    if [ -z "$DIP" ]; then
        echo "IP address is empty?"
        exit 1
    fi
    echo "$DIP"
}

# Setup ssh config file
# Check if the name is already taken
function ssh_config_add_host {
    local NAME="$1"
    local SSHHOSTS="$2"
    local DIP="$3"
    local PATHTOPRIVKEY="$4"
    if grep -w "${NAME}" "${SSHHOSTS}"; then
        grep -w "${NAME}" -A5 "${SSHHOSTS}"
        read -p "${NAME} was found in ${SSHHOSTS}, replace it (y/n)? " -n 1 -r  
        echo    
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "Changing IP for $NAME in $SSHHOSTS"
            local OLDIP=$(grep -A1 $NAME $SSHHOSTS | tail -n1 | cut -d' ' -f6)
            [ ! $? -eq 0 ] && exit 1
            sed -i "s/${OLDIP}/${DIP}/g" "$SSHHOSTS"
            [ ! $? -eq 0 ] && exit 1
        elif [[ $REPLY =~ ^[Nn]$ ]]; then
            echo "Adding duplicate ${NAME} to ssh config file:"
#TODO add a nonce to delineate these
            echo "Host ${NAME}
        HostName ${DIP}
        User root
        IdentityFile ${PATHTOPRIVKEY}
        IdentitiesOnly yes
            " >> "${SSHHOSTS}"
            [ ! $? -eq 0 ] && exit 1
        else
            exit 1
        fi
    else
        echo "Host ${NAME}
        HostName ${DIP}
        User root
        IdentityFile ${PATHTOPRIVKEY}
        IdentitiesOnly yes
        " >> "${SSHHOSTS}"
        [ ! $? -eq 0 ] && exit 1
    fi
}

function ansible_add_host {
    local NAME="$1"
    local ANSHOSTS="$2"
    local DIP="$3"
    if grep -w "${NAME}" "${ANSHOSTS}"; then
        grep -w "${NAME}" -A5 "${ANSHOSTS}"
        read -p "${NAME} was found in ${ANSHOSTS}, replace it (y/n)? " -n 1 -r  
        echo    
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "Changing IP for $NAME in $ANSHOSTS"
            local OLDIP=$(grep $NAME $ANSHOSTS | cut -d'=' -f3)
            [ ! $? -eq 0 ] && exit 1
            sed "s/${OLDIP}/${DIP}/g" "$ANSHOSTS" > "${TMPDIR}/anshosts"
            cat "${TMPDIR}/anshosts" > "$ANSHOSTS"
            [ ! $? -eq 0 ] && exit 1
        elif [[ $REPLY =~ ^[Nn]$ ]]; then
            echo "Adding duplicate ${NAME} to ansible config file:"
#TODO add a nonce to delineate these
            echo "${NAME} ansible_port=22 ansible_host=${DIP}" >> "${ANSHOSTS}"
            [ ! $? -eq 0 ] && exit 1
        else
            exit 1
        fi
    else
        echo "${NAME} ansible_port=22 ansible_host=${DIP}" >> "${ANSHOSTS}"
        [ ! $? -eq 0 ] && exit 1
    fi
}

function do_add_record {
    local SUBDOMAIN="$1"
    local DOMAIN="$2"
    local DIP="$3"
    local FQDN="${SUBDOMAIN}.${DOMAIN}"
# TODO find and update matching DNS records
    echo "Setup subdomain with Digitalocean DNS."
    local DNSRAW=$(doctl compute domain records \
        create "${DOMAIN}" \
        --record-type A \
        --record-name "${SUBDOMAIN}" \
        --record-data "${DIP}" \
        -o json
        )
    if [ ! $? -eq 0 ]; then
        echo "Error creating dns record."
        exit 1
    fi
    local DNSID=$(echo "${DNSRAW}" | jq '.[0] .id')
    if [ ! $? -eq 0 ] || [ -z "$DNSID" ]; then
        echo "Error parsing JSON."
        echo "${DNSRAW}"
        echo "${DNSID}"
        exit 1
    fi
    local DNSID=$(echo "${DNSID}" | tr -d '\n')
    if [ -z "$DNSID" ]; then
        echo "DNSID is empty."
        exit 1
    else
        echo "DNS A record for ${FQDN} to ${DIP} was created."
    fi
}

main "$@"
exit 0
