#!/bin/bash

error_exit() {
	local lc="$BASH_COMMAND" rc=$?
	echo "Command [$lc] exited with code [$rc]"
}
trap error_exit EXIT
set -e

main() 
{
	scriptdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
	read -p "Database host: [localhost] " dbhost
	dbhost=${dbhost:-localhost}
	read -p "Database user: [wp] " dbuser
	dbuser=${dbuser:-wp}
	read -p "Database name: [live] " dbname
	dbname=${dbname:-live}
	read -p "Database password: " dbpass
	read -p "Domain (no http://, no www): " fqdn
	read -p "Site title: [Title] " title
	title=${title:-Title}
	read -p "User: [admin] " user
	user=${user:-admin}
	read -p "Password: " password
	read -p "Email: " email

	cd ${scriptdir}
	cp -vr assets/nginx-* /tmp

	# if dbname or fqdn empty abort	
	[[ -z $dbname ]] && exit "db Name must not be empty"
	[[ -z $fqdn ]] && exit "domain name must not be empty"
	sed -i -e "s/BRANCH/${dbname}/g" /tmp/nginx-wordpress
	sed -i -e "s/FQDN/${fqdn}/g" /tmp/nginx-wordpress
	sed -i -e "s/FQDN/${fqdn}/g" /tmp/nginx-snippets/ssl-certs.conf
	sed -i -e "s/FQDN/${fqdn}/g" /tmp/nginx-snippets/ssl-certs-www.conf
	scp -r /tmp/nginx-* ${1}:

	ssh -t ${1} "sudo mv -v nginx-letsencrypt /etc/nginx/sites-available/"
	ssh -t ${1} "sudo mv -v nginx-wordpress /etc/nginx/sites-available/"
	ssh -t ${1} "sudo mv -v nginx-snippets/* /etc/nginx/snippets/"
	ssh -t ${1} "sudo rm -v /etc/nginx/sites-enabled/*"
	ssh -t ${1} "sudo ln -sv /etc/nginx/sites-available/nginx-letsencrypt /etc/nginx/sites-enabled/"
	ssh -t ${1} "[ ! -f /etc/ssl/certs/dhparam.pem ] && sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 || exit 0"
	ssh -t ${1} "sudo service nginx restart"
	# TODO: check dns resolution matches ip
	ssh -t ${1} "ifconfig | grep 'inet addr:'| grep -v '127.0.0.1' | grep -v 'addr:10\.' | cut -d: -f2 | cut -d ' ' -f 1" > /tmp/${fqdn}-ip
	targetIP=$(cat /tmp/${fqdn}-ip)
	ssh -t ${1} "host -4 -t A ${fqdn} | cut -d ' ' -f 4" > /tmp/${fqdn}-dns
	dnsIP=$(cat /tmp/${fqdn}-dns)
	if [ "$dnsIP" != "$targetIP" ]; then 
		exit "The domain name ${fqdn} does not resolve to the specified droplet (${1})."
	elif [ "$dnsIP" == "found:" ]; then
		exit "The domain could not be resolved to any ip address. Check DNS records."
	fi
	ssh -t ${1} "sudo letsencrypt certonly -a webroot --webroot-path=/var/www/html -d ${fqdn}"
	ssh -t ${1} "sudo letsencrypt certonly -a webroot --webroot-path=/var/www/html -d www.${fqdn}"
	ssh -t ${1} "sudo rm /etc/nginx/sites-enabled/nginx-letsencrypt"
	ssh -t ${1} "sudo ln -s /etc/nginx/sites-available/nginx-wordpress /etc/nginx/sites-enabled/"
	ssh -t ${1} "sudo service nginx restart"

	ssh ${1} "sudo cat /root/.digitalocean_password" > /tmp/stupid
	source /tmp/stupid
	rm -f /tmp/stupid
	myargs="-u root -p${root_mysql_pass} -e"
	ssh ${1} "mysql ${myargs} \"drop database ${dbname};\" || exit 0" 
	ssh ${1} "mysql ${myargs} \"create database ${dbname};\"" 
	ssh ${1} "mysql ${myargs} \"create user '${dbuser}'@'${dbhost}' identified by '${dbpass}';\"" 
	ssh ${1} "mysql ${myargs} \"grant all privileges on ${dbname}.* to '${dbuser}'@'${dbhost}';\"" 
	ssh ${1} "mysql ${myargs} \"flush privileges;\"" 
	ssh -t ${1} "\
		cd /var/www/html; \
		wp core download; \
		wp core config \
			--dbhost=${dbhost} \
			--dbname=${dbname} \
			--dbuser=${dbuser} \
			--dbpass=${dbpass}; \
		wp core install \
			--url=${fqdn} \
			--title=${title} \
			--admin_user=${user} \
			--admin_password=${password} \
			--admin_email=${email} \
			--skip-email \
		" 
}

main ${1}
exit 0		
