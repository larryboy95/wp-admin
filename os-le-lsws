#!/bin/bash

USAGE="
Usage:
LEMAIL=user@localhost $(basename $0) HOST [WWW]

HOST is used for both the ssh connection and the certificate domain.
WWW defaults to true. Set to false if cert is for the bare domain only.
Env variable LEMAIL must be set

"
# Print USAGE if no args
if [ $# -lt 2 ] ||
	[ -z $LEMAIL ] ; then
	echo "$USAGE"
	exit 1
fi
HOST=$1
if [ -z $2 ]; then
	WWW="www.$HOST"
fi

# Connection test
ssh $HOST "exit 0"
if [ ! $? -eq 0 ]; then
	echo "FAIL to connect to $HOST over ssh"
	exit 2
fi

# Verify what certs are being used
# Fail if the configured cert path does not match our expectation
ssh ${HOST} "grep -q $HOST/fullchain.pem /usr/local/lsws/conf/vhosts/wordpress/vhconf.conf"
if [ ! $? -eq 0 ]; then
	echo "FAIL to find expected cert path in config"
	exit 2
fi
echo "Expected configuration was found."

# Test if the certs are configured in the listener instead of vhost
# grep $HOST/privkey.pem /usr/local/lsws/conf/httpd_config.conf
# grep $HOST/fullchain.pem /usr/local/lsws/conf/httpd_config.conf

# Run certbot in test mode to verify domain resolution
CMD="certbot certonly \
	--dry-run \
	--non-interactive \
	--force-renew \
	--email=$LEMAIL \
	--agree-tos \
	--authenticator=standalone \
	--pre-hook='/bin/systemctl stop lsws' \
	--post-hook='/bin/systemctl start lsws' \
	-d $HOST"
if [ -z $WWW ]; then
	CMD+=" -d $WWW"
fi
# -t makes it an interactive session, output is verbose
ssh -t ${HOST} ${CMD}
if [ ! $? -eq 0 ]; then
	echo "FAIL certbot dry run"
	exit 2
fi
CMD=""

# BACKUP the old certs for this domain
ssh ${HOST} "cp -rf /etc/letsencrypt ~/BACKUP-LE/$(date +%s)"
if [ ! $? -eq 0 ]; then
	echo "FAIL to backup old certs"
	exit 2
fi

# DELETE the old certs for this domain
ssh ${HOST} "rm -rf /etc/letsencrypt/live/$HOST"
if [ ! $? -eq 0 ]; then
	echo "FAIL to remove old certs"
	exit 2
fi
ssh ${HOST} "rm -rf /etc/letsencrypt/archive/$HOST" 
if [ ! $? -eq 0 ]; then
	echo "FAIL to remove old certs"
	exit 2
fi
ssh ${HOST} "rm /etc/letsencrypt/renewal/$HOST.conf" 
if [ ! $? -eq 0 ]; then
	echo "FAIL to remove old certs"
	exit 2
fi
echo "Old certs removed."

# The following command will setup a renewal job
# in /etc/letsencrypt/renewal/$HOST.conf with:
#   pre_hook = /bin/systemctl stop lsws
#   post_hook = /bin/systemctl start lsws
#   authenticator = standalone
echo "Getting the new cert..."
CMD="certbot certonly \
	--non-interactive \
	--force-renew \
	--email=$LEMAIL \
	--agree-tos \
	--authenticator=standalone \
	--pre-hook='/bin/systemctl stop lsws' \
	--post-hook='/bin/systemctl start lsws' \
	-d $HOST"
if [ -z $WWW ]; then
	CMD+=" -d $WWW"
fi
# -t makes it an interactive session, output is verbose
ssh -t ${HOST} ${CMD}
if [ ! $? -eq 0 ]; then
	echo "FAIL certbot live"
	exit 2
fi

ssh $HOST "reboot"

exit 0
