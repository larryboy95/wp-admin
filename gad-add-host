#!/bin/bash

USAGE="
$(basename $0) Version 0.1.3

Usage: gad-add-host HOST
Adds HOST to /etc/git-auto-deploy.conf.json for automatic
deployment on pushes to the specified branch.
Interactive: will ask for repo url, branch and remote deploy path

HOST must be configured in ~/.ssh/config
"
# Print USAGE if no args
if [ $# -eq 0 ]; then
    echo "$USAGE"
    exit 1
fi

main()
{
	scriptdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
	read -p "Repo url: " repo
	read -p "Branch [master]: " branch
	read -p "Remote deploy path [/var/www/html]: " deploypath
	branch=${branch:-master}
	webroot=/var/repos/${1}
	deploypath=${deploypath:-/var/www/html}
	cp ${scriptdir}/assets/gad-repo.scaffold /tmp/
	scaffold=/tmp/gad-repo.scaffold
	# Search and replace values in scaffold
	sed -i -e 's/BRANCH/'${branch}'/g' ${scaffold}
	sed -i -e "s/REPO/${repo//\//\\/}/g" ${scaffold}
	sed -i -e "s/WEBROOT/${webroot//\//\\/}/g" ${scaffold}
	sed -i -e "s/HOST/${1//\//\\/}/g" ${scaffold}
	sed -i -e "s/DEPLOYPATH/${deploypath//\//\\/}/g" ${scaffold}
	newrepo=$(cat $scaffold)
	cat /etc/git-auto-deploy.conf.json \
		| jq ".repositories[.repositories| length] += ${newrepo}" \
		> /tmp/git-auto-deploy.conf.json
	cp /etc/git-auto-deploy.conf.json ~/.gad.conf.json.backup
	sudo cp /tmp/git-auto-deploy.conf.json /etc/git-auto-deploy.conf.json
	sudo cp ~/.ssh/config /etc/git-auto-deploy/.ssh/
	sudo cp ~/.ssh/known_hosts /etc/git-auto-deploy/.ssh/
	sudo chmod 600 /etc/git-auto-deploy/.ssh/config
	sudo chmod 600 /etc/git-auto-deploy/.ssh/id_rsa
	sudo chmod 660 /etc/git-auto-deploy/.ssh/known_hosts
	sudo chmod 660 /etc/git-auto-deploy/.ssh/id_rsa.pub
	sudo chown git-auto-deploy:git-auto-deploy /etc/git-auto-deploy/.ssh/config
	sudo service git-auto-deploy stop
	sudo pkill git-auto-deploy
	sudo service git-auto-deploy start
	sudo tail -f /var/log/git-auto-deploy.log
}
# Error handling a la http://stackoverflow.com/a/22224317
abort()
{
	rm -f /tmp/gad*
	rm -f /tmp/git-auto-deploy*
	echo "An error occurred. Exiting..." >&2
	exit 1
}
trap 'abort' 0
set -e

main ${1}

# Trap all errors
trap : 0
# Exit normally
echo >&2 '
************
*** DONE ***
************
'


exit 0
