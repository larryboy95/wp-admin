#!/bin/bash
USAGE="
Usage: $SCRIPTNAME HOSTNAME [WEBROOT OWNER]

This script is run by a git hook, 
but it can be run manually as well.
HOSTNAME must be configured in ~/.ssh/config
Deploys from WORKTREE to HOST:WEBROOT
Default WEBROOT is /var/www/html

WORKTREES should be set as an environment variable.
WORKTREES defaults to /var/worktrees
WORKTREE will be set to WORKTREES/HOSTNAME
(i.e. /var/worktrees/www.clientsite.com)

OWNER defaults to \"none\".
The wordpress-permissions script will be run on HOSTNAME:WEBROOT
with OWNER as the argument unless OWNER is set to \"none\".

Requires a .gitignore file in worktree dir to use as file mask.
Deletes all files in WEBROOT unless they exist:
	a) in the worktree
	b) in the .gitignore
A discouraging robots.txt is added to WEBROOT when the
git branch is detected to be staging or development.
"
# Print USAGE if no args
if [ $# -eq 0 ]; then
	echo "$USAGE"
	exit 1
fi
if [ ! $(which notify) ]; then
	echo "$(date) notify-cli not found, exiting"
	exit 1
fi

# msgfmt formats notification content
msgfmt() {
	local s="$HOSTNAME -"
	case $1 in
	init)
		s="$s Initializing deployment"
	;;
	path)
		s="$s \`wp-cli\` not found on admin server"
	;;
	gitignore)
		s="$s gitignore not found in $WORKTREE. Abort deployment."
	;;
	rsync23)
		s="$s rsync exited with code 23 (some files failed to transfer) while attempting to deploy"
	;;
	rsync)
		s="$s rsync exited with code $RSYNCERR while attempting to deploy"
	;;
	botslocate)
		s="$s Could not locate $ROBOTSTXT"
	;;
	botsdeploy)
		s="$s $BRANCH branch, deploying the $ROBOTSTXT to disallow all bots."
	;;
	botserror)
		s="$s rsync error  while attempting to deploy $ROBOTSTXT"
	;;
	botsexist)
		s="$s Robots.txt exists on production domain $SITEURL"
	;;
	botsactual)
		s="$s Actual robots.txt after deployment: $ROBOTSREAL"
	;;
	botscurl)
		s="$s Curl failed to retrieve robots.txt with error code $ERR"
	;;
	nowp)
		s="$s \`wp core is-installed\` failed, most likely a PATH issue."
	;;
	siteurl)
		s="$s Error getting siteurl. Using ssh HOST instead."
	;;
	fin)
		s="$s Deployment completed."
	esac
	notify "$s" $2
}

export SLACK_CHANNEL_NORMAL="__deploy"
export SLACK_CHANNEL_CRITICAL="__error"
SCRIPTDIR="$( cd "$( dirname "$(readlink -f "$0")" )" >/dev/null 2>&1 && pwd )"
HOSTNAME="$1"
WEBROOT=${2:-/var/www/html}
OWNER=${3:-none}
WORKTREES="${WORKTREES:-/var/deploy/worktrees}"
WORKTREE="$WORKTREES/$HOSTNAME"
GITIGNORE="${WORKTREE}/.gitignore"
SITEURL=""
BRANCH=""
RSYNCERR=""
WPBIN=$(which wp)
if [ $? -eq 0 ]; then
	WP="$WPBIN --path=$WEBROOT --allow-root --skip-themes --skip-plugins --ssh=$HOSTNAME"
else
	msgfmt 'path' critical
	exit 1
fi

msgfmt 'init'


check_for_gitignore() {
	if [ ! -f "$GITIGNORE" ]; then 
		msgfmt 'gitignore' critical
		exit 1
	fi
}

do_the_sync() {
	echo "$(date) syncing files to ${HOSTNAME}:${WEBROOT}"
	rsync -r \
		--exclude=".git*" \
		--exclude-from="$GITIGNORE" \
		--delete \
		--chmod=D755,F644 \
		$WORKTREE/ ${HOSTNAME}:${WEBROOT}
	RSYNCERR="$?"
	if [ "$RSYNCERR" -eq 23 ]; then
		msgfmt 'rsync23' 
	elif [ ! "$RSYNCERR" -eq 0 ]; then
		msgfmt 'rsync' critical
	else
		echo "$(date) rsync completed without error"
	fi
}

forbid_robots() {
	cd "$WORKTREE"
	BRANCH="$(git rev-parse --abbrev-ref HEAD)"

	if [[ "$BRANCH" == "staging" ]] \
	|| [[ "$BRANCH" == "development" ]]
	then
		deploy_robots
	elif [[ "$BRANCH" == "master" ]] \
	|| [[ "$BRANCH" == "main" ]]
	then
		production_robots
	fi
	get_robots
}

deploy_robots() {
	ROBOTSTXT="$SCRIPTDIR/robots.txt-disallow"
	if [ ! -f "$ROBOTSTXT" ]; then
		msgfmt 'botslocate' critical
		exit 1
	fi
	msgfmt 'botsdeploy'
	rsync -v "$ROBOTSTXT" "${HOSTNAME}:${WEBROOT}/"
	if [ ! $? -eq 0 ]; then
		msgfmt 'boterr' critical
	else
		echo "$(date) rsync completed without error (for $ROBOTSTXT)"
	fi
}

production_robots() {
	ssh $HOSTNAME "[ -f $WEBROOT/robots.txt ] && exit 42" > /dev/null 2>&1
	if [ $? -eq 42 ]; then
		msgfmt 'botsexist' critical
	fi
}

get_robots() {
	CURLTMP=/tmp/curl.tmp
	curl --insecure $SITEURL/robots.txt > $CURLTMP
	ERR="$?"
	ROBOTSREAL="$(cat $CURLTMP)"
	if [ $ERR -eq 0 ] && [ ! -z "$ROBOTSREAL" ]; then
		msgfmt 'botsactual'
	else
		msgfmt 'botscurl' critical
	fi
	rm $CURLTMP
}

set_permissions() {
	if [[ "$OWNER" != "none" ]]; then
		wordpress-permissions "$HOSTNAME" "$OWNER"
		PERMERR="$?"
		if [ ! "$PERMERR" -eq 0 ]; then
			echo "$(date) ERROR wordpress-permissions exited with code $PERMERR"
		fi
	fi
}

check_installed() {
	$WP \
		--quiet \
		core is-installed
	if [ ! $? -eq 0 ]; then
		msgfmt 'nowp' critical
	fi
}

get_siteurl() {
	SITEURL=$($WP --quiet option get siteurl)
	if [ ! $? -eq 0 ]; then
		msgfmt 'siteurl' critical
		SITEURL="https://$HOSTNAME/"
	fi
}


check_for_gitignore
do_the_sync
set_permissions
check_installed
get_siteurl
forbid_robots
msgfmt 'fin'

exit 0
