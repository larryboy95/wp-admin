# Variables required on command line
# i.e. ansible-playbook --external-vars="foo=bar"
# mysql_root_password
# fqdn
# host

# https://galaxy.ansible.com/willshersystems/sshd/
---
sshd:
    - Compression: true
    - PasswordAuthentication: no

ufw_rules:
    - rule: allow
      from_ip: "{{ adminip }}"
      to_port: 22
      protocol: tcp
    - rule: allow
      to_port: 80
      protocol: tcp
    - rule: allow
      to_port: 443
      protocol: tcp

# https://galaxy.ansible.com/geerlingguy/mysql/
mysql_root_password: "{{ mysql_root_password }}"
mysql_databases:
    - name: wordpress
mysql_users:
    - name: wordpress
      host: "localhost"
      password: "{{ mysql_wp_password }}"
      priv: "wordpress.*:ALL"

# https://galaxy.ansible.com/geerlingguy/certbot/
# Certbot auto-renew cron job configuration (for certificate renewals).
certbot_auto_renew: true
certbot_auto_renew_user: "{{ ansible_user }}"
certbot_auto_renew_hour: 17
certbot_auto_renew_minute: 30
certbot_auto_renew_options: "--quiet --no-self-upgrade"

# Parameters used when creating new Certbot certs.
certbot_create_if_missing: "{{ newcert }}"
certbot_create_method: standalone
certbot_admin_email: "{{ email }}"
certbot_certs: 
  # - email: janedoe@example.com
  #   domains:
  #     - example1.com
  #     - example2.com
  - domains:
      - "{{ fqdn }}"
certbot_create_command: "{{ certbot_script }} certonly --standalone --noninteractive --agree-tos --email {{ cert_item.email | default(certbot_admin_email) }} -d {{ cert_item.domains | join(',') }}"
certbot_create_standalone_stop_services:
  - nginx
  # - apache
  # - varnish

# To install from source (on older OSes or if you need a specific or newer
# version of Certbot), set this variable to `yes` and configure other options.
certbot_install_from_source: no
certbot_repo: https://github.com/certbot/certbot.git
certbot_version: master
certbot_keep_updated: yes

# Where to put Certbot when installing from source.
certbot_dir: /opt/certbot

# https://galaxy.ansible.com/geerlingguy/nginx/
nginx_conf_template: "{{ playbook_dir }}/templates/nginx.conf.j2"
nginx_client_max_body_size: "64m"
nginx_vhosts:
    - listen: "443 ssl http2"
      server_name: "{{ fqdn }} www.{{ fqdn }}"
      root: "/var/www/html"
      index: "index.php"
      error_page: "404 /404.html"
      state: "present"
      template: "{{ nginx_vhost_template }}"
      filename: "wordpress.conf"
      extra_parameters: |
        location ~ \.php$ {
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
        }
        location / {
            try_files $uri $uri/ /index.php?$args;
        }
        location = /favicon.ico { log_not_found off; access_log off; }
        location = /robots.txt { log_not_found off; access_log off; allow all; }
        location ~* \.(css|gif|ico|jpeg|jpg|js|png)$ {
            expires max;
            log_not_found off;
        }
        location ~ /.git {
            deny all;
        }
        ssl_certificate     /etc/ssl/certs/ssl-cert-snakeoil.pem;
        ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
        ssl_protocols       TLSv1.1 TLSv1.2;
        ssl_ciphers         "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve      secp384r1;
        ssl_session_cache   shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling        on;
        ssl_stapling_verify on;
        resolver            1.1.1.1 valid=300s;
        resolver_timeout    5s;
        ssl_prefer_server_ciphers on;

    - listen: "80"
      server_name: "{{ fqdn }} www.{{ fqdn }}"
      return: "301 https://{{ fqdn }}/$request_uri"
      filename: "{{ fqdn }}.80.conf"

php_owner: 'www-data'
php_group: 'www-data'

es_instance_name: "eslocal"
es_api_basic_auth_username: "elastic"
es_api_basic_auth_password: "changeme"
...
