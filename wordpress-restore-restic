#!/bin/bash

USAGE="
$(basename $0) Version 0.2.5

Usage: wordpress-restore-restic HOST FQDN RESTICDB [RESTICCODEBASE CONFIGFILE WEBROOT]
For DigitalOcean only.
Restores a WordPress site from Restic.

HOST must be configured in ~/.ssh/config
FQDN the fully qualified domain name for the site
RESTICDB hash of target db to restore

# Optional arguments and their defaults
RESTICCODEBASE hash of target snapshot to restore
CONFIGFILE defaults to ~/.wp-admin-config/wp-admin.conf
WEBROOT is not yet implemented

# Optional environmental variables
BIGTMP must have enough space free, ~/.tmp-big
"
# Print USAGE if no args
if [ $# -eq 0 ]; then
	echo "$USAGE"
	exit 1
fi

function main {
	local HOSTNAME RESTICCODEBASE RESTICDB CONFIGFILE SCRIPTDIR
	local RESTIC BIGTMP WPDIR SQLGZ SITEURL PREFIX WPCONFIG
	HOSTNAME="$1"
	FQDN="$2"
	RESTICDB="$3"
	[ ! -z "$4" ] && RESTICCODEBASE="$4"
	CONFIGFILE="${5:-${HOME}/.wp-admin-config/wp-admin.conf}"
	echo "$CONFIGFILE"
	SCRIPTDIR=$(dirname "${0}")
	WPARGS="--path=/var/www/html --ssh=${FQDN} --allow-root"
	RESTIC=$(which restic)
	BIGTMP="${BIGTMP:-${HOME}/.tmp-big}"
# TODO implement WEBROOT

# Cleanup on exit
	trap "rm -rf ${BIGTMP}/*" EXIT
# Check for required values and binaries
	[ -f "$CONFIGFILE" ] && source $CONFIGFILE || { echo "Config not found"; exit 1; }
	[ ! -f "$RESTIC" ] && { echo "RESTIC binary not found"; exit 1; }
	[ -z "$RESTICDB" ] && { echo "RESTICDB key not set"; exit 1; }
	[ -z "$RESTIC_REPOSITORY" ] && { echo "RESTIC_REPOSITORY key not set"; exit 1; }
	[ -z "$RESTIC_PASSWORD" ] && { echo "RESTIC_PASSWORD key not set"; exit 1; }
	[ -z "$AWS_ACCESS_KEY_ID" ] && { echo "AWS_ACCESS_KEY_ID key not set"; exit 1; }
	[ -z "$AWS_SECRET_ACCESS_KEY" ] && { echo "AWS_SECRET_ACCESS_KEY key not set"; exit 1; }

	echo "Test connection"
	while true; do
		ssh -o ConnectTimeout=3 -q "$FQDN" \
			"[ -f /var/lib/cloud/instance/boot-finished ]"
		if [ $? -eq 0 ]; then
			sleep 1
			echo "Connected"
			break
		else
			echo "No connection, trying again"
			sleep 1
		fi
	done

# Make big tmp dir if not exist
	[ ! -d "$BIGTMP" ] && mkdir "$BIGTMP"

	if [ ! -z "$RESTICCODEBASE" ]; then 
# Restore the targeted snapshots to the big temp dir
		$RESTIC restore \
			--exclude=".git*" \
			--exclude="mri-admin*" \
			${RESTICCODEBASE} \
			-qt "$BIGTMP" \
			|| exit 1
# Find the wordpress webroot and copy to server
		WPCONFIG=$(find ${BIGTMP}/ -name "wp-config.php")
		WPCONFIG=${WPCONFIG//$'\n'/}
		[ -z "$WPCONFIG" ] && { echo "wp-config.php not found"; exit 1; }
		WPDIR=$(find ${BIGTMP}/ -name "wp-config.php" | xargs dirname)
		WPDIR=${WPDIR//$'\n'/}
		[ -z "$WPDIR" ] && { echo "wp dir not found"; exit 1; }
		ssh "$FQDN" "mkdir /var/www/new" 
		rsync \
			-av \
			--exclude=".git*" \
			--progress \
			"${WPDIR}"/* \
			"${FQDN}:/var/www/new"
# Replace the webroot with the new files
		ssh "$FQDN" "mv /var/www/html /var/www/html-vanilla" || exit 1
		ssh "$FQDN" "mv /var/www/new /var/www/html" || exit 1
		ssh "$FQDN" "cp /var/www/html/wp-config.php /var/www/wp-config.php.old" || exit 1
		ssh "$FQDN" "cp /var/www/wp-config.php.fresh /var/www/html/wp-config.php" || exit 1
# Extract the db table prefix from old config
# Find the old line, remove the trailing newline, escape single quotes
		PREFIX=$(grep "table_prefix" "$WPCONFIG")
		PREFIX=$(echo -n "$PREFIX" | sed "s/'/\\\'/g")
		ssh "$FQDN" "sed -i '/table_prefix/c "${PREFIX}"' /var/www/html/wp-config.php" || exit 1
		ssh "$FQDN" "rm /etc/nginx/sites-enabled/default; service nginx restart" || exit 1
		wordpress-permissions "$FQDN" dev || exit 1
	else
		echo "RESTICCODEBASE not supplied, restoring database only."
	fi
# Get the db backup
	$RESTIC restore \
		${RESTICDB} \
		-qt \
		"$BIGTMP" \
		|| exit 1
# Find, extract and import the db
# Replace the siteurl
	SQLGZ=$(find ${BIGTMP}/ -name "*.sql.gz")
	SQLGZ=${SQLGZ//$'\n'/}
	gunzip "$SQLGZ"
	SQL=$(find ${BIGTMP}/ -name "*.sql")
	scp "$SQL" "${FQDN}:/var/www/restore.sql" || { echo "scp error"; exit 1; }
	wp $WPARGS db reset
	wp $WPARGS db import /var/www/restore.sql
	SITEURL=$(wp $WPARGS option get siteurl)
	wp $WPARGS search-replace "$SITEURL" "https://${FQDN}" --skip-columns=guid
	wp $WPARGS cache flush
#notify "Site has been restored to ${FQDN}."
}

main "$@"
exit 0
